Given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].

 

Example 1:


Input: root = [10,5,15,3,7,null,18], low = 7, high = 15
Output: 32
Explanation: Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32.
Example 2:


Input: root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10
Output: 23
Explanation: Nodes 6, 7, and 10 are in the range [6, 10]. 6 + 7 + 10 = 23.
 

Constraints:

The number of nodes in the tree is in the range [1, 2 * 104].
1 <= Node.val <= 105
1 <= low <= high <= 105
All Node.val are unique.
===============================================================================================================================================================================

Recursive Approach
  Time Complexity O(n)
  Space COmplexity O(1)
  /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int rangeSumBST(TreeNode walker, int low, int high) {
        
        int sum =0;
        if(walker!=null){
            if(walker.val >= low && walker.val <= high){
                sum+= walker.val;
                sum+=rangeSumBST(walker.left, low, high);
                sum+=rangeSumBST(walker.right, low, high);
            } else if(walker.val <low){
                walker= walker.right;
                sum+=rangeSumBST(walker, low, high);
            } else if(walker.val> high){
                walker= walker.left;
                sum+=rangeSumBST(walker, low, high);
            }
        }
        return sum;
    }
}
==========================================================================================================================================================================

Iterative Approach
  Time Complexity O(n)
  Space Complexity O(n)
  
  /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int rangeSumBST(TreeNode walker, int low, int high) {
        
        int sum =0;
        Stack<TreeNode> stack = new Stack();
        stack.push(walker);
        while(!stack.isEmpty()){
            TreeNode node = stack.pop();
            if(node!=null){
                if(node.val>= low && node.val<=high){
                    sum+=node.val;
                }
                if(node.val > low){
                    stack.push(node.left);
                }
                if(node.val < high){
                    stack.push(node.right);
                }
            }
        }
        return sum;
    }
}
