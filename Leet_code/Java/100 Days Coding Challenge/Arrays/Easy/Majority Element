/*
Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the array.

Example 1:

Input: [3,2,3]
Output: 3
Example 2:

Input: [2,2,1,1,1,2,2]
Output: 2

*/
==================================================================================================================================
Brute Force : Time Complexity O(n^2)
Time Complexity O(1)

class Solution
{
    public int majorityElement(int[] nums)
    {
        int majorityCount = nums.length/2;

        for (int num : nums)
        {
            int count = 0;
            for (int elem : nums)
            {
                if (elem == num) 
                {
                    count += 1;
                }
            }

            if (count > majorityCount) 
            {
                return num;
            }

        }

        return -1;    
    }
}

===================================================================================================================================
Using HashMap : 
Time Complexity O(n)
Space Complexity O(n)
class Solution
{
    public int majorityElement(int[] nums)
    {
        int cutoff = nums.length/2;
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int num : nums)
        {
            if(!map.containsKey(num))
            {
                map.put(num,1);
            }
            else
            {
                map.put(num, map.get(num)+1);
            }
            if(map.get(num) > cutoff)
            {
                return num;
            }
        }
        return -1;
    }
}
====================================================================================================================================

In  place Sort 
Time Complexity O(nlogn)
Space Comlexity O(1)
class Solution
{
    public int majorityElement(int[] nums)
    {
        if(nums.length>1)
        {
            Arrays.sort(nums);
            return nums[nums.length/2];
        }
        else if(nums.length==1)
        {
            return nums[0];
        }
        else
        {return 0;}
    }
}
