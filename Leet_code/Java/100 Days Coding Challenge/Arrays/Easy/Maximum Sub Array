/*
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Follow up:

If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.
*/
=================================================================================================================================================

Time Complexity O(n)
Space Complexity O(n)
class Solution {
    public int maxSubArray(int[] nums)
    {
        if(nums.length>0)
        {
            if(nums.length==1)
            {
                return nums[0];
            }
            else
            {
                int sum=nums[0];
                int current_sum = nums[0];
                for(int i=1; i<nums.length; i++)
                {
                    current_sum= Math.max(nums[i], (current_sum+nums[i]));
                    if(current_sum> sum)
                    {
                        sum = current_sum;
                    }
                }
                return sum;
            }
        }    
        return 0;
    }
}

========================================================================================================================================================4
Kadane's Algorithm
Time Complexity O(n)
Space complexity O(1)
class Solution {
    public int maxSubArray(int[] nums)
    {
        int max =nums[0]; 
        int max_so_far = nums[0];
        for(int i=1; i<nums.length; i++)
        {
            max_so_far = Math.max(max_so_far+nums[i], nums[i]);
            max = Math.max(max, max_so_far);
        }
        return max;
    }
}
===============================================================================================================================================================
