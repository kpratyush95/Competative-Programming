/*
Say you have an array for which the ith element is the price of a given stock on day i.

If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.

Note that you cannot sell a stock before you buy one.

Example 1:

Input: [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
             Not 7-1 = 6, as selling price needs to be larger than buying price.
Example 2:

Input: [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.
*/

=====================================================================================================================
Brute Force Method :
                    Time Complexity O(n^2)
                    Space Complexity O(1)
class Solution 
{
    public int maxProfit(int[] prices)
    {
        int max=0;
        for(int i =0; i< prices.length; i++)
        {
            int cp = prices[i];
            for(int j = i+1; j< prices.length; j++)
            {
                int sp = prices[j];
                if(sp>=cp)
                {
                    max = Math.max(max, sp-cp);
                }
            }
        }
        return max;
    }
}
============================================================================================================================
Using DP(Not exactly DP) :
      Time Complexity O(n)
      Space Complexity O(n)
class Solution 
{
    public int maxProfit(int[] prices)
    {
        if(prices.length>2)
        {
            int [] profit = new int[prices.length]; //Array to store Profits
            profit [0] = 0; //No transsactions possible on day 1
            profit[1] = Math.max(0, prices[1] - prices[0]); // Profit on Day 1
            profit[2] = prices[2] - Math.min(prices[0], prices[1]);// Profit on day 2; We need atleast 2 days data prior to calculate maximum profit
            int max = Math.max(profit[0], profit[1]);
            max = Math.max(max, profit[2]);
            for(int i=3; i< prices.length; i++)
            {
                profit[i] = Math.max(prices[i]- prices[i-1], prices[i]- (prices[i-1]- profit[i-1]));
                /* the second parameter gives the profit of current - minimum of values one before current ,
                which is like profit(5thday) = max ( value(5thday) -value(4thday) , value(5)- min(val(0),val(1),val(2) , val(3)))
                we have received this minimum value by processing the di which stores profits 
                 [7,1,5,3,6,4]  profit : [0,0,4,]    
                now since we need minimum of 7,1,5 to subtract from 3 
                to get the best possible profit, instead of going on doing min(.......)
                we use the 4which is the profit , 5 which is selling price to 
                get the cost which is the MINIMUM VALUE. ( 5-4 = 1) and then 3-1 = 2(profit at that place) -
                we are also doing 3-5 = - 2 since we are nt checking 5 for the minimum value 
                (implying that the subtraction done previously invloves minimum value before 5) and then we store the max of this( 2,-2) which is 2[0,0,4,2] */
                
                
                if(max < profit[i] )
                {
                    max = profit[i];
                }
            }   
            return max;
        }
        else if(prices.length ==2)
        {
            return Math.max(0, prices[1]-prices[0]);
        }
        else
        {
            return 0;
        }
    }
    
}
