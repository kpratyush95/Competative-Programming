/*
Given an array of integers nums.

A pair (i,j) is called good if nums[i] == nums[j] and i < j.

Return the number of good pairs.

 

Example 1:

Input: nums = [1,2,3,1,1,3]
Output: 4
Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.
Example 2:

Input: nums = [1,1,1,1]
Output: 6
Explanation: Each pair in the array are good.
Example 3:

Input: nums = [1,2,3]
Output: 0
 

Constraints:

1 <= nums.length <= 100
1 <= nums[i] <= 100
*/
=============================================================================
Brute Force Method : 
  Time Complexity O(n^2) Two For loops
  Space Complexity O(1)

class Solution {
    public int numIdenticalPairs(int[] nums) 
    {
        int count= 0;
        for(int i=0; i<nums.length-1; i++)
        {
            for(int j = i+1;j<nums.length; j++)
            {
                if(nums[i]==nums[j])
                {
                    count+=1;
                }
            }
        }
        return count;
    }
}
==============================================================================
Dynamic Programming :
Time Complexity O(n)
Space Complexity O(n)
class Solution {
    public int numIdenticalPairs(int[] nums) 
    {
        int max =0;
        Map<Integer, Integer> map = new HashMap<>();
        for(int i=0; i< nums.length; i++)
        {
            Integer count = map.get(nums[i]);
            if(count!=null)
            {
                count+=1;
                max = Math.max(count, max);
            }
            else
            { 
                count =0;
            }
            map.put(nums[i], count);
        }
        int[] dp = new int[max+1];
        for(int i=1; i<=max; i++)
        {
            dp[i] = dp[i-1]+i;
        }
        int res =0;
        for(Map.Entry<Integer, Integer> entry : map.entrySet())
        {
            res+=dp[entry.getValue()];
        }
        return res;
    }
}


