'''
Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

 

Example 1:

Input: nums = [1,2,3,1]
Output: true
Example 2:

Input: nums = [1,2,3,4]
Output: false
Example 3:

Input: nums = [1,1,1,3,3,4,3,2,4,2]
Output: true
 

Constraints:

1 <= nums.length <= 105
-109 <= nums[i] <= 109
'''
//Using Merge Sort Time Complexity O(nlogn)
Space complexity O(1)

class Solution {
    public boolean containsDuplicate(int[] nums) 
    {
        sortArray(nums, 0, nums.length-1);
        for(int i=0; i< nums.length-1; i++)
        {
            if(nums[i]==nums[i+1])
            {
                return true;
            }
            
        }
        return false;
    }
    
    public void sortArray(int[] nums, int start, int end)
    {
        if(start< end)
        {
            int middle = partition(nums, start, end);    
            sortArray(nums, start, middle-1);
            sortArray(nums, middle+1, end);
        }
    }
    
    public void swap(int[] nums, int i, int j)
    {
        int temp = nums[i];
        nums[i] =nums[j];
        nums[j] =temp;
    }
    public int partition(int[] nums, int start, int end)
    {
        if(nums!=null && nums.length>0 && start<=end )
        {
            int pivot = nums[end];
            int i= start-1;
            for(int j=start; j< end; j++)
            {
                if(nums[j]< pivot)
                {
                    i++;
                    swap(nums, i, j);
                }
            }
            i+=1;
            swap(nums, i, end);
            return i;
        }
        return 0;
    }
}
=========================================================================================================================================================
Inbuit sort method
class Solution {
    public boolean containsDuplicate(int[] nums) 
    {
        Arrays.sort(nums);
        for(int i=0; i< nums.length-1; i++)
        {
            if(nums[i]==nums[i+1])
            {
                return true;
            }
            
        }
        return false;
    }
}
===========================================================================================================================================================
