/*
Given an array of positive integers arr, calculate the sum of all possible odd-length subarrays.

A subarray is a contiguous subsequence of the array.

Return the sum of all odd-length subarrays of arr.

 

Example 1:

Input: arr = [1,4,2,5,3]
Output: 58
Explanation: The odd-length subarrays of arr and their sums are:
[1] = 1
[4] = 4
[2] = 2
[5] = 5
[3] = 3
[1,4,2] = 7
[4,2,5] = 11
[2,5,3] = 10
[1,4,2,5,3] = 15
If we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58
Example 2:

Input: arr = [1,2]
Output: 3
Explanation: There are only 2 subarrays of odd length, [1] and [2]. Their sum is 3.
Example 3:

Input: arr = [10,11,12]
Output: 66
 

Constraints:

1 <= arr.length <= 100
1 <= arr[i] <= 1000
*/

**Method 1 : Brute Force Method**
Time Complexity : O(n^3)
Space Complexity : O(1)

class Solution {
    public int sumOddLengthSubarrays(int[] arr)
    {
        if(arr.length>0)
        {
            int total_sum =0;
            for(int window = 1; window<=arr.length; window+=2)
            {
                for(int i =0; i+window<=arr.length; i++)
                {
                    for(int j = i; j< i+window; j++)
                    {
                        total_sum += arr[j];
                
                    }
                }
            }
            return total_sum;    
        }
        return 0;
    }
}
=================================================================================================================================
Method 2 Sliding Window Method
Time Complexity O(n^2)
Space Complexity O(1)
class Solution {
    public int sumOddLengthSubarrays(int[] arr)
    {
        if(arr.length>0)
        {
            int total_sum =0;
            for(int window = 1; window<=arr.length; window+=2)
            {
                int window_sum =0;
                for(int i =0; i<window; i++)
                {
                    window_sum += arr[i];
                }
                total_sum+= window_sum;
                for(int i=1; i+window<= arr.length; i++)
                {
                    window_sum = window_sum - arr[i-1] + arr[i+ window-1];
                    total_sum+= window_sum;
                }
            }
            return total_sum;    
        }
        return 0;
    }
}
=======================================================================================================================================
Method 3: 
Time Complexity O(n)
Space Complexity O(1)
class Solution {
    public int sumOddLengthSubarrays(int[] arr)
    {
        if(arr.length>0)
        {
            int total_sum =0, n = arr.length;
            int evenStops = (n & 1) == 0 ? n /2 : n/ 2 + 1;
            int evenStarts = 1;
            int oddStart =0;
            int oddStop = n/2;
            for(int i=0; i<n; i++)
            {
                total_sum += ((evenStops*evenStarts )+ (oddStart*oddStop))*arr[i];
                if((i&1)==0)
                {
                    oddStart++;
                    evenStops--;
                }
                else
                {
                    evenStarts++;
                    oddStop--;
                }
            }
            return total_sum;    
        }
        return 0;
    }
}
