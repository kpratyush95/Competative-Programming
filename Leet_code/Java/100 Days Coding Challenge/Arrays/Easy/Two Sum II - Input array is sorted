/*
Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.

The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2.

Note:

Your returned answers (both index1 and index2) are not zero-based.
You may assume that each input would have exactly one solution and you may not use the same element twice.
Example:

Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore index1 = 1, index2 = 2.
*/

===========================================================================
Brute Force Method :
 Time Complexity O(n^2)
 Space Complexity O(1)
class Solution {
    public int[] twoSum(int[] numbers, int target) 
    {
      for(int i =0;i< numbers.length; i++)
      {
          for( int j =numbers.length-1; j>=0;j--)
          {
              if(numbers[i]+numbers[j] == target)
              {
                   return new int[]{ i+1,j+1};
              }
          }
      }
        return new int[]{-1, -1}; 
    }
}
==============================================================================
Two Pointers 
Time Complexity O(n)
Space Complexity O(1)
class Solution {
    public int[] twoSum(int[] numbers, int target) 
    {
        int i=0, j = numbers.length-1;
        while(i<j)
        {
            int sum = numbers[i]+numbers[j];
            if(sum == target)
            {
                return new int [] {i+1, j+1}; 
            }
            else if(sum> target)
            {
                j--;
            }
            else if(sum < target)
            {
                i++;
            }
        }
        return new int [] {-1, -1};
    }
}
==========================================================================================
HashMap
Time Complexity O(n)
Space Complexity O(n)
class Solution {
    public int[] twoSum(int[] numbers, int target) 
    {
        
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i =0; i< numbers.length; i++)
        {
            map.put(numbers[i], i);
        }
        for(int i =0; i< numbers.length; i++)
        {
            if(map.containsKey(target - numbers[i]))
            {
                return new int[] {i+1, map.get(target - numbers[i])+1};
            }
        }
        return new int [] {-1, -1};
    }
}
================================================================================================
