/*
You are given two arrays (without duplicates) nums1 and nums2 where nums1â€™s elements are subset of nums2. Find all the next greater numbers for nums1's elements in the corresponding places of nums2.

The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, output -1 for this number.

Example 1:
Input: nums1 = [4,1,2], nums2 = [1,3,4,2].
Output: [-1,3,-1]
Explanation:
    For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.
    For number 1 in the first array, the next greater number for it in the second array is 3.
    For number 2 in the first array, there is no next greater number for it in the second array, so output -1.
Example 2:
Input: nums1 = [2,4], nums2 = [1,2,3,4].
Output: [3,-1]
Explanation:
    For number 2 in the first array, the next greater number for it in the second array is 3.
    For number 4 in the first array, there is no next greater number for it in the second array, so output -1.
Note:
All elements in nums1 and nums2 are unique.
The length of both nums1 and nums2 would not exceed 1000.
*/
===========================================================================================================================================================
Using Hash Map and Stack Time Complexity O(n)
SpaceComplexity O(n) 
class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) 
    {
        if(nums1.length> 1 && nums2.length> 1 && nums1.length<1001 && nums2.length<1001 && nums1.length<=nums2.length)
        {
            Map<Integer, Integer> map = new HashMap<Integer, Integer>();
            Stack <Integer> stack= new Stack<>();
            for(int num : nums2)
            {
                while(!stack.isEmpty() && num> stack.peek())
                {
                    map.put(stack.pop(), num);
                }
                stack.push(num);
            }
            for(int i=0; i<nums1.length; i++)
    	    {
    		    nums1[i]= map.getOrDefault(nums1[i],-1);
            
    	    }
    	    return nums1;
            
        }
        return new int[0];
    }
}
==================================================================================================================================
class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) 
    {
        if(nums1.length> 1 && nums2.length> 1 && nums1.length<1001 && nums2.length<1001 && nums1.length<=nums2.length)
        {
            Map<Integer, Integer> map = new HashMap<Integer, Integer>();
            int pointer = 0;
            int [] res= new int[nums1.length];
            Stack <Integer> stack= new Stack<>();
            for(int i=0; i< nums2.length; i++)
            {
                map.put(nums2[i], i);
            }
            for(int i = 0; i<nums1.length; i++)
            {
                int j = map.get(nums1[i])+1;
                int max = Integer.MIN_VALUE;
                while(j< nums2.length)
                {
                    if(nums2[j]> nums1[i])
                    {
                        max = nums2[j];
                        break;
                    }
                    j+=1;
                }
                res[pointer++] = max == Integer.MIN_VALUE ? -1 : max;
            }
    	    return res;
        }
        return new int[0];
    }
}
