/*
A valid parentheses string is either empty (""), "(" + A + ")", or A + B, where A and B are valid parentheses strings, and + represents string concatenation.  For example, "", "()", "(())()", and "(()(()))" are all valid parentheses strings.

A valid parentheses string S is primitive if it is nonempty, and there does not exist a way to split it into S = A+B, with A and B nonempty valid parentheses strings.

Given a valid parentheses string S, consider its primitive decomposition: S = P_1 + P_2 + ... + P_k, where P_i are primitive valid parentheses strings.

Return S after removing the outermost parentheses of every primitive string in the primitive decomposition of S.

 

Example 1:

Input: "(()())(())"
Output: "()()()"
Explanation: 
The input string is "(()())(())", with primitive decomposition "(()())" + "(())".
After removing outer parentheses of each part, this is "()()" + "()" = "()()()".
Example 2:

Input: "(()())(())(()(()))"
Output: "()()()()(())"
Explanation: 
The input string is "(()())(())(()(()))", with primitive decomposition "(()())" + "(())" + "(()(()))".
After removing outer parentheses of each part, this is "()()" + "()" + "()(())" = "()()()()(())".
Example 3:

Input: "()()"
Output: ""
Explanation: 
The input string is "()()", with primitive decomposition "()" + "()".
After removing outer parentheses of each part, this is "" + "" = "".
 

Note:

S.length <= 10000
S[i] is "(" or ")"
S is a valid parentheses string
*/
==============================================================================================================================================
Using StringBuilder : 
                      TimeComplexity O(n)
                      SpaceCompelxity O(n)

class Solution {
    public String removeOuterParentheses(String S) 
    {
        if(S!=null)
        {
            StringBuilder sb = new StringBuilder();
            int open_braces =0, closed_braces=0;
            for(char c : S.toCharArray())
            {
                switch(c)
                {
                    case '(': 
                            open_braces+=1;
                            if(open_braces!=1)
                            {
                                sb.append(c);
                            }
                            break;
                    case ')':
                            closed_braces+=1;
                            if(closed_braces==open_braces)
                            {
                                open_braces=0;
                                closed_braces=0;
                            }
                            else
                            {
                                sb.append(c);
                            }
                    break;
                }
            }
            return sb.toString();
        }
        return S;
    }
}
===================================================================================================================================
Using Stack :
            Time Complexity O(n)
            Space Complexity O(n)
class Solution {
    public String removeOuterParentheses(String S) 
    {
        if(S!=null && S.length()>2)
        {
            Stack<Character> stack = new Stack();
            String str = "";
            for(char i : S.toCharArray())
            {
                if(i == '(' && stack.size()==0)
                {
                    stack.push(i);
                }
                else if(i =='(' && stack.size()>0)
                {
                    stack.push(i);
                    str+=i;
                }
                else if(i==')' && stack.size()>1)
                {
                    char c = i;
                    while(c!='(')
                    {
                        c = stack.pop();
                        str+=i;
                    }
                }
                else if(i == ')' && stack.size()==1)
                {
                    stack.pop();
                }
            }
            return str;
        }
        else
        {
            return "";
        }
    }
}
=======================================================================================================================================================
Time Complexity O(n)
Space Complexity O(n)
class Solution {
    public String removeOuterParentheses(String S) 
    {
        if(S!=null && S.length()>2)
        {
            StringBuilder sb = new StringBuilder();
            int paranthesis = 0;
            for(char c : S.toCharArray())
            {
                if(c=='(')
                {
                    ++paranthesis;
                    if(paranthesis!=1)
                    {
                        sb.append(c);
                    }
                }
                else
                {
                    --paranthesis;
                    if(paranthesis!=0)
                    {
                        sb.append(c);
                    }
                }
            }
            return sb.toString();
        }
        else
        {
            return "";
        }
    }
}
