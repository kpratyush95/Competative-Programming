/*
You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [7,2,4,3], l2 = [5,6,4]
Output: [7,8,0,7]
Example 2:

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [8,0,7]
Example 3:

Input: l1 = [0], l2 = [0]
Output: [0]
 

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.
 
*/
=========================================================================================================================================================================
Time Complexity O(n1+n2)
Space Complexity: O(1)
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    
    private ListNode reverseList(ListNode head){
        ListNode last = null;
        while(head!=null){
            ListNode temp = head.next;
            head.next = last;
            last =  head;
            head = temp;
        }
        return last;
    }
    
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
     
        l1 = reverseList(l1);
        l2 = reverseList(l2);
        ListNode holder =null;
        int carry =0;
        while(l1!=null || l2!=null){
            int x = l1==null ? 0:l1.val;
            int y = l2==null ? 0:l2.val;
            int val = (carry+x+y)%10;
            carry = (carry+x+y)/10;
            ListNode walker = new ListNode(val);
            walker.next = holder;
            holder = walker;
            l1 = l1!=null ? l1.next:null;
            l2 = l2!=null ? l2.next:null;
        }
        if(carry!=0){
            ListNode walker = new ListNode(carry);
            walker.next = holder;
            holder = walker;
        }
        return holder;
    }
}
