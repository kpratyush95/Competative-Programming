/*
You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.

 

Example 1:

Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6
Example 2:

Input: lists = []
Output: []
Example 3:

Input: lists = [[]]
Output: []
 

Constraints:

k == lists.length
0 <= k <= 10^4
0 <= lists[i].length <= 500
-10^4 <= lists[i][j] <= 10^4
lists[i] is sorted in ascending order.
The sum of lists[i].length won't exceed 10^4.
*/
=========================================================================================================================================================

Approach 1 Merge List one by one

Time Complexity O(NlogN)
Space Complexity O(1)

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    
    private ListNode mergeTwoLists(ListNode l1, ListNode l2){
        ListNode dummyHead = new ListNode(Integer.MIN_VALUE);
        ListNode walker = dummyHead;
        while(l1!=null && l2!=null){
            if(l1.val <= l2.val){
                walker.next = l1;
                l1 = l1.next;
            }else{
                walker.next = l2;
                l2 = l2.next;
            }
            walker = walker.next;
        }
         walker.next = l1==null ? l2:l1;
        return dummyHead.next;
    }
    
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length>1){
          
            ListNode head = mergeTwoLists(lists[0], lists[1]);
            for(int i=2;i<lists.length; i++){
                head = mergeTwoLists(head, lists[i]);
            }
            return head;
        }else if(lists.length==1){
            return lists[0];
        }
        else{
            return null;
        }
    }
}
====================================================================================================================================================

Approach 2: Using Priority Queue
Time Complexity O(NlogN)
Space Complexity O(n)

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    
    
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length>1){
           Queue<ListNode> queue = new PriorityQueue<>((ListNode l1, ListNode l2)-> l1.val - l2.val);
            for(ListNode l : lists){
                if(l!=null){
                    queue.add(l);
                }
            }
            ListNode head = new ListNode(0);
            ListNode walker = head;
            while(!queue.isEmpty()){
                walker.next = queue.poll();
                walker = walker.next;
                if(walker.next!=null){
                    queue.add(walker.next);
                }
            }
            return head.next;
        }else if(lists.length==1){
            return lists[0];
        }
        else{
            return null;
        }
    }
}
===================================================================================================================================================
Using Divide and Conquer

Time Complexity O(kn)
Space Complexity O(1)

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    private ListNode mergeTwoLists(ListNode l1, ListNode l2){
        ListNode dummyHead = new ListNode(Integer.MIN_VALUE);
        ListNode walker = dummyHead;
        while(l1!=null && l2!=null){
            if(l1.val <= l2.val){
                walker.next = l1;
                l1 = l1.next;
            }else{
                walker.next = l2;
                l2 = l2.next;
            }
            walker = walker.next;
        }
         walker.next = l1==null ? l2:l1;
        return dummyHead.next;
    }
    
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length>1){
           int interval =1;
            while(interval< lists.length){
                for(int i=0; i+interval < lists.length; i+=interval*2){
                    lists[i] = mergeTwoLists(lists[i],lists[i+interval]);
                }
                interval*=2;
            }
            return lists[0];
        }else if(lists.length==1){
            return lists[0];
        }
        else{
            return null;
        }
    }
}

