/*
Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

 

Example 1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1
Example 2:

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] is '0' or '1'.
*/

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
There are 3 ways to solve this
1) using DFS
2) using BFS
3) using Disjoint set union find


Method 1 Using DFS:
    Time Complexity O(MxN)
    Space Complexity O(MxN)
  
 class Solution {
    
    
    private void dfs(char[][] grid, int row, int col){
        int m = grid.length;
        int n = grid[0].length;
        if(row >-1 && row<m && col>-1 && col<n && grid[row][col]=='1'){
            grid[row][col] ='2';
            dfs(grid, row-1, col);
            dfs(grid, row+1, col);
            dfs(grid, row, col-1);
            dfs(grid, row, col+1);
        }
    }
    
    public int numIslands(char[][] grid) {
        
        if(grid!=null && grid.length>0){
            int m = grid.length;
            int n = grid[0].length;
            int numIslands=0;
            for(int i=0; i< m; i++){
                for(int j=0; j<n; j++){
                    if(grid[i][j]=='1'){
                        numIslands++;
                        dfs(grid, i, j);
                    }
                }
            }
            return numIslands;
        }
        return  0;
    }
}
==================================================================================================================================================================================
Method 2 Using BFS
    Time Complexity O(MxN)
    Space Complexity O(MxN)
    class Solution {
    public int numIslands(char[][] grid) {
        if(grid!=null && grid.length>0){
            int m = grid.length;
            int n = grid[0].length;
            int numIslands =0;
            for(int i=0; i<m; i++){
                for(int j=0; j<n; j++){
                    if(grid[i][j]=='1'){
                        numIslands++;
                        grid[i][j] = '2';
                        Queue<Integer> neighbors = new LinkedList<>();
                        neighbors.add(i*n+j);
                        while(!neighbors.isEmpty()){
                            int id = neighbors.remove();
                            int row = id/n;
                            int col = id%n;
                            if(row-1>=0 && grid[row-1][col]=='1'){
                                grid[row-1][col] ='2';
                                neighbors.add((row-1)*n+col);
                            }
                            if(row+1<m && grid[row+1][col]=='1'){
                                grid[row+1][col] ='2';
                                neighbors.add((row+1)*n+col);
                            }
                            if(col-1>=0 && grid[row][col-1]=='1'){
                                grid[row][col-1] ='2';
                                neighbors.add((row)*n+col-1);
                            }
                            if(col+1<n && grid[row][col+1]=='1'){
                                grid[row][col+1] ='2';
                                neighbors.add((row)*n+col+1);
                            }
                        }
                    }
                } 
            }
            return numIslands;
        }
        return 0;
    }
}
=================================================================================================================================================================================
Using Union(Disjoint Sets)

Time Complexity O(MxN)
Space Complexity O(MxN)

class Solution {
    
    class UnionFind{
        int count;
        int[] parent;
        int [] rank;
        
        public UnionFind(char[][] grid){
            count =0;
            int m = grid.length;
            int n = grid[0].length;
            parent = new int[m*n];
            rank = new int[m*n];
            for(int i=0; i<m; ++i){
                for(int j =0; j<n; ++j){
                    if(grid[i][j]=='1'){
                        parent[i*n+j] = i*n+j;
                        ++count;
                    }
                    rank[i*n+j] =0;
                }
            }
        }
        
        public int find(int i){
            if(parent[i]!=i){
                parent[i] = find(parent[i]);
            }
            return parent[i];
        }
        
        public void union(int x, int y){
            int rootx = find(x);
            int rooty = find(y);
            if(rootx != rooty){
                if(rank[rootx] > rank[rooty]){
                    parent[rooty] = rootx;
                }else if(rank[rootx]< rank[rooty]){
                    parent[rootx] = rooty;
                }else{
                    parent[rooty] = rootx;
                    rank[rootx]+=1;
                }
                --count;
            }
        }
        
        public int getCount(){
            return count;
        }
    }
    
    public int numIslands(char[][] grid) {
        if(grid!=null && grid.length>0){
            int m = grid.length;
            int n = grid[0].length;
            UnionFind uf = new UnionFind(grid);
            for(int i =0; i< m; i++){
                for(int j=0; j<n; j++){
                    if(grid[i][j]=='1'){
                        grid[i][j]='2';
                        if(i-1>-1 && grid[i-1][j]=='1'){
                            uf.union(i*n + j, (i-1)*n+j);
                        }
                        if(i+1<m && grid[i+1][j]=='1'){
                            uf.union((i+1)*n+j, i*n+j);
                        }
                        if(j-1>-1 && grid[i][j-1]=='1'){
                            uf.union(i*n+j-1, i*n+j);
                        }
                        if(j+1<n && grid[i][j+1]=='1'){
                            uf.union(i*n+j, i*n+j+1);
                        }
                        
                    }
                }
            }
            return uf.getCount();
        }
        return 0;
    }
}
