/*
Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

Example:
Given a binary tree
          1
         / \
        2   3
       / \     
      4   5    
Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].

Note: The length of path between two nodes is represented by the number of edges between them.


*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution 
{
    int  max_depth =0;
    public int diameterOfBinaryTree(TreeNode root) 
    {
        if(root !=null)
        {
            Map<TreeNode, Integer> map = new HashMap<>();
            int diameter = 0;
            Deque<TreeNode> s = new ArrayDeque<>();
            s.push(root);
            TreeNode last_pop = root;
            while(!s.isEmpty())
            {
                TreeNode top = s.peek();
                if(top.left!=null && top.left!= last_pop  
                   && !map.containsKey(top.left))
                {
                    s.push(top.left);
                }
                else if(top.right!=null && top.right!=last_pop
                       && !map.containsKey(top.right))
                {
                    s.push(top.right);
                }
                else
                {
                    s.pop();
                    last_pop = top;
                    int left_depth = map.getOrDefault(top.left,0);
                    int right_depth = map.getOrDefault(top.right,0);
                    map.put(top, 1 + Math.max(left_depth, right_depth));
                    diameter = Math.max(diameter, left_depth+right_depth);
                    
                }
                
            }
            return diameter;
        }
        return 0;
        
    }
}
