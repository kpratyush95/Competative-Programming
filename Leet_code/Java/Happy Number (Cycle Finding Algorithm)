/*
Write an algorithm to determine if a number is "happy".

A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.

*/

/*

It was clearly mentioned in the problem statement that if a number ain't happy then it will lead to a cycle ... and whenever you hear the word cycle the first thing you should remember is "Floyd's cycle-finding algorithm" also known as "Tortoise and the Hare algorithm"
*/

class Solution 
{
    public boolean isHappy(int n) 
    {
       int fast=n,slow=n;
		do 
		{
			slow= calculate(slow);
			fast = calculate(calculate(fast));
			if(slow==1) return true;
		}
		while(slow!=fast);
		return false;
    }
	public static int calculate(int num) 
	{
		int sum=0;
		while(num!=0) 
		{
			sum+= (num%10)*(num%10);
			num/=10;
		}
		return sum;
	}
        
}
