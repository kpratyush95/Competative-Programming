/*
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
 

Example:

MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.
 
*/

class MinStack {

    /** initialize your data structure here. */
    public MinStack() 
    {
         
    }
    int min;
    Stack<Integer> stack = new Stack<Integer>();
    Stack<Integer> min_stack = new Stack<Integer>();
    public void push(int x)
    {
        min =x;
        if(!min_stack.isEmpty() && min > min_stack.peek())
        {
            min = min_stack.peek();
            min_stack.push(min);
        }
        
        else
        {
            min_stack.push(x);
        }
        stack.push(x);
        
         
    }
    
    public void pop()
    {
        stack.pop();
        min_stack.pop();
        
    }
    
    public int top() 
    {
      return stack.peek();   
    }
    
    public int getMin() 
    {
       return min_stack.peek(); 
    }
