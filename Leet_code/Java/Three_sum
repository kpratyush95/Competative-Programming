/*
Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note:

The solution set must not contain duplicate triplets.

Example:

Given array nums = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]
*/

//Used recursion insted of iteration to avoid time limit exceeded
class Solution {
    public List<List<Integer>> threeSum(int[] nums)
    {
        List<List<Integer>> set = new ArrayList<>();
        if(nums!=null && nums.length>=3)
        {
            Arrays.sort(nums);
            for(int i=0; i<nums.length-2; i++)
            {
                if(i>0 && nums[i]== nums[i-1]) continue;
                int target = -nums[i];
                int low = i+1;
                int high = nums.length - 1;
                sum(nums, set, target, low, high);
            }
        }      
        return new ArrayList<>(set);
    }
    private void sum(int[] nums, List<List<Integer>> set, int target, int low, int high)
    {
        while(low<high)
        {
            int sum = nums[low] + nums[high];
            if(target==sum)
            {
                set.add(Arrays.asList(-target, nums[low], nums[high]));
                low++;
                high--;
                while(low<high && nums[low]== nums[low-1])low++;
                while(low<high && high<nums.length-1 && nums[high]== nums[high+1])high--;
            }
            else if(sum>target) high--;
            else if (sum<target) low++;
            
        }
    }
}
======================================================================================================================================
Output
Your input
[-1,0,1,2,-1,-4]
Output
[[-1,-1,2],[-1,0,1]]
Expected
[[-1,-1,2],[-1,0,1]]
======================================================================================================================================
  Set<List<Integer>> threeSumSet  = new HashSet<>();
        
        Arrays.sort(nums);
        
        for(int i=0; i<nums.length-2;i++){                         //Doing length-2, because we want two elems j and k after i.
            int j =i+1;
            
            int k = nums.length-1;
            
            while(j<k){
                
                int sum = nums[i]+nums[j]+nums[k];
                
                if(sum==0){
                    threeSumSet.add(Arrays.asList(nums[i], nums[j], nums[k]));
                    
                    j++;
                    k--;
                }
                else if (sum > 0){
                    k--;
                } 
                else if (sum < 0){
                    j++;
                } 
            }

        }
        
        return new ArrayList<>(threeSumSet);
    }








