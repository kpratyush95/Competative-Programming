'''
Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321
Example 2:

Input: -123
Output: -321
Example 3:

Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer 
range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.
'''

#Solution 1

class Solution:
    def reverse(self, x: int) -> int:
        ret = 0
        if(x>((2**31)-1) or x<((-2)**31)):
            return 0
        elif -10<x<10:
            return x
        else:
            length = len(str(abs(x)))
            for i in range(length):
                rem =int( x/10**(length-i-1))
                x -= rem*(10**(length-i-1))
                ret+=(10**i)*rem
            if (ret<((2**31)-1) and ret>((-2)**31)):
                return ret
            else:
                return 0
                
 ##################################################################################################################################
 
 #Solution 2
 class Solution:
    def reverse(self, x: int) -> int:
        flag=False
        if x<0:
            flag=True
        x_str = str(abs(x))
        res=''.join(reversed(x_str))
        if flag:
            res= -int(res)
            if res > 2**31 -1 or res < -2**31:
                return 0
            return res
        res = int(res)
        if res > 2**31 -1 or res < -2**31:
            return 0
        return res
        
